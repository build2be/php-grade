{"filename":".\/src\/Formatters\/AngularFormatter.php","lines":[{"nr":1,"line":"<?php","msg":[]},{"nr":2,"line":"\/**","msg":[]},{"nr":3,"line":" * Created by PhpStorm.","msg":[]},{"nr":4,"line":" * User: martijn","msg":[]},{"nr":5,"line":" * Date: 27-6-14","msg":[]},{"nr":6,"line":" * Time: 16:15","msg":[]},{"nr":7,"line":" *\/","msg":[{"tool":"phpcs","level":2,"message":"PHP version not specified"},{"tool":"phpcs","level":2,"message":"Missing @category tag in file comment"},{"tool":"phpcs","level":2,"message":"Missing @package tag in file comment"},{"tool":"phpcs","level":2,"message":"Missing @author tag in file comment"},{"tool":"phpcs","level":2,"message":"Missing @license tag in file comment"},{"tool":"phpcs","level":2,"message":"Missing @link tag in file comment"}]},{"nr":8,"line":"","msg":[]},{"nr":9,"line":"namespace PhpGrade\\Formatters;","msg":[]},{"nr":10,"line":"","msg":[{"tool":"phpdcd","level":0,"message":"4 lines of dead code"},{"tool":"phpdcd","level":0,"message":"4 lines of dead code"},{"tool":"phpdcd","level":0,"message":"4 lines of dead code"},{"tool":"phpdcd","level":0,"message":"4 lines of dead code"}]},{"nr":11,"line":"","msg":[]},{"nr":12,"line":"use PhpGrade\\Message;","msg":[]},{"nr":13,"line":"","msg":[]},{"nr":14,"line":"class AngularFormatter extends BaseFormatter","msg":[{"tool":"phpcs","level":2,"message":"Missing class doc comment"}]},{"nr":15,"line":"{","msg":[]},{"nr":16,"line":"    public function format($messages, $outputDir = null, $serve = false)","msg":[{"tool":"phpcs","level":2,"message":"Missing function doc comment"},{"tool":"phpmd","level":0,"message":"The method format has a boolean flag argument $serve, which is a certain sign of a Single Responsibility Principle violation."},{"tool":"phpmd","level":0,"message":"The method format() has a Cyclomatic Complexity of 13. The configured cyclomatic complexity threshold is 10."},{"tool":"phpmd","level":0,"message":"The method format() has an NPath complexity of 264. The configured NPath complexity threshold is 200."},{"tool":"phpdcd","level":0,"message":"87 lines of dead code"},{"tool":"phpdcd","level":0,"message":"87 lines of dead code"},{"tool":"phpdcd","level":0,"message":"87 lines of dead code"}]},{"nr":17,"line":"    {","msg":[]},{"nr":18,"line":"        $phpGradeRoot = __DIR__ . '\/..\/..\/';","msg":[]},{"nr":19,"line":"        $resourceRoot = $phpGradeRoot . 'resource\/web\/';","msg":[]},{"nr":20,"line":"        $tempDir = $phpGradeRoot . 'tmp\/';","msg":[]},{"nr":21,"line":"        $this->ensure_directory($tempDir);","msg":[]},{"nr":22,"line":"        $this->recurse_copy($resourceRoot, $tempDir);","msg":[]},{"nr":23,"line":"        $this->ensure_directory($tempDir . 'data\/');","msg":[]},{"nr":24,"line":"","msg":[{"tool":"phpdcd","level":0,"message":"4 lines of dead code"},{"tool":"phpdcd","level":0,"message":"4 lines of dead code"},{"tool":"phpdcd","level":0,"message":"4 lines of dead code"},{"tool":"phpdcd","level":0,"message":"4 lines of dead code"}]},{"nr":25,"line":"        $index = array('files' => array());","msg":[{"tool":"phpdcd","level":0,"message":"41 lines of dead code"},{"tool":"phpdcd","level":0,"message":"41 lines of dead code"},{"tool":"phpdcd","level":0,"message":"41 lines of dead code"},{"tool":"phpdcd","level":0,"message":"41 lines of dead code"}]},{"nr":26,"line":"        $totalCounter = array(","msg":[]},{"nr":27,"line":"          'info' => 0,","msg":[]},{"nr":28,"line":"          'warning' => 0,","msg":[]},{"nr":29,"line":"          'error' => 0","msg":[]},{"nr":30,"line":"        );","msg":[]},{"nr":31,"line":"        foreach ($messages as $filename => $file) {","msg":[]},{"nr":32,"line":"            $counter = array(","msg":[{"tool":"phpdcd","level":0,"message":"4 lines of dead code"},{"tool":"phpdcd","level":0,"message":"4 lines of dead code"},{"tool":"phpdcd","level":0,"message":"4 lines of dead code"},{"tool":"phpdcd","level":0,"message":"4 lines of dead code"}]},{"nr":33,"line":"                'info' => 0,","msg":[]},{"nr":34,"line":"                'warning' => 0,","msg":[]},{"nr":35,"line":"                'error' => 0","msg":[]},{"nr":36,"line":"            );","msg":[]},{"nr":37,"line":"            foreach ($file as &$line) {","msg":[]},{"nr":38,"line":"                foreach ($line as &$message) {","msg":[]},{"nr":39,"line":"                    $message = $this->messageToArray($message);","msg":[]},{"nr":40,"line":"                    switch($message['level']){","msg":[{"tool":"phpdcd","level":0,"message":"4 lines of dead code"},{"tool":"phpdcd","level":0,"message":"4 lines of dead code"},{"tool":"phpdcd","level":0,"message":"4 lines of dead code"},{"tool":"phpdcd","level":0,"message":"4 lines of dead code"}]},{"nr":41,"line":"                        case Message::LEVEL_INFO:","msg":[{"tool":"phpcs","level":2,"message":"Line indented incorrectly; expected 20 spaces, found 24"},{"tool":"phpmd","level":0,"message":"Avoid using static access to class '\\PhpGrade\\Message' in method 'format'."}]},{"nr":42,"line":"                            $counter['info']++;","msg":[]},{"nr":43,"line":"                            break;","msg":[]},{"nr":44,"line":"                        case Message::LEVEL_WARNING:","msg":[{"tool":"phpcs","level":2,"message":"Line indented incorrectly; expected 20 spaces, found 24"},{"tool":"phpmd","level":0,"message":"Avoid using static access to class '\\PhpGrade\\Message' in method 'format'."}]},{"nr":45,"line":"                            $counter['warning']++;","msg":[]},{"nr":46,"line":"                            break;","msg":[]},{"nr":47,"line":"                        case Message::LEVEL_ERROR:","msg":[{"tool":"phpcs","level":2,"message":"Line indented incorrectly; expected 20 spaces, found 24"},{"tool":"phpmd","level":0,"message":"Avoid using static access to class '\\PhpGrade\\Message' in method 'format'."}]},{"nr":48,"line":"                            $counter['error']++;","msg":[{"tool":"phpdcd","level":0,"message":"4 lines of dead code"},{"tool":"phpdcd","level":0,"message":"4 lines of dead code"},{"tool":"phpdcd","level":0,"message":"4 lines of dead code"},{"tool":"phpdcd","level":0,"message":"4 lines of dead code"}]},{"nr":49,"line":"                            break;","msg":[]},{"nr":50,"line":"                    }","msg":[]},{"nr":51,"line":"                }","msg":[]},{"nr":52,"line":"            }","msg":[]},{"nr":53,"line":"","msg":[]},{"nr":54,"line":"            $totalCounter['info'] += $counter['info'];","msg":[]},{"nr":55,"line":"            $totalCounter['warning'] += $counter['warning'];","msg":[]},{"nr":56,"line":"            $totalCounter['error'] += $counter['error'];","msg":[{"tool":"phpdcd","level":0,"message":"4 lines of dead code"},{"tool":"phpdcd","level":0,"message":"4 lines of dead code"},{"tool":"phpdcd","level":0,"message":"4 lines of dead code"},{"tool":"phpdcd","level":0,"message":"4 lines of dead code"}]},{"nr":57,"line":"","msg":[]},{"nr":58,"line":"            $file = $this->mergeSourceCode($file, $filename);","msg":[]},{"nr":59,"line":"            $json = json_encode($file);","msg":[]},{"nr":60,"line":"            $jsonFileName = $tempDir . 'data\/' . sha1($filename) . '.json';","msg":[]},{"nr":61,"line":"            $index['files'][] = array(","msg":[]},{"nr":62,"line":"              'resource' => sha1($filename) . '.json',","msg":[]},{"nr":63,"line":"              'filename' => $filename,","msg":[]},{"nr":64,"line":"              'messages' => $counter","msg":[]},{"nr":65,"line":"            );","msg":[]},{"nr":66,"line":"            if (!is_dir(dirname($jsonFileName))) {","msg":[]},{"nr":67,"line":"                mkdir(dirname($jsonFileName), 0777, true);","msg":[]},{"nr":68,"line":"            }","msg":[]},{"nr":69,"line":"            file_put_contents($jsonFileName, $json);","msg":[]},{"nr":70,"line":"        }","msg":[{"tool":"phpdcd","level":0,"message":"89 lines of dead code"},{"tool":"phpdcd","level":0,"message":"89 lines of dead code"},{"tool":"phpdcd","level":0,"message":"89 lines of dead code"},{"tool":"phpdcd","level":0,"message":"89 lines of dead code"}]},{"nr":71,"line":"","msg":[]},{"nr":72,"line":"        $index['counters'] = $totalCounter;","msg":[]},{"nr":73,"line":"        file_put_contents($tempDir . 'data\/index.json', json_encode($index));","msg":[]},{"nr":74,"line":"","msg":[]},{"nr":75,"line":"        if(substr($outputDir, -1) == '\/'){","msg":[{"tool":"phpcs","level":2,"message":"Expected \"if (...) {\\n\"; found \"if(...){\\n\""},{"tool":"phpcs","level":2,"message":"There must be a single space between the closing parenthesis and the opening brace of a multi-line IF statement; found 0 spaces"}]},{"nr":76,"line":"            $outputDir = substr($outputDir, 0, -1);","msg":[]},{"nr":77,"line":"        }","msg":[]},{"nr":78,"line":"","msg":[]},{"nr":79,"line":"        if($outputDir !== null){","msg":[{"tool":"phpcs","level":2,"message":"Expected \"if (...) {\\n\"; found \"if(...){\\n\""},{"tool":"phpcs","level":2,"message":"There must be a single space between the closing parenthesis and the opening brace of a multi-line IF statement; found 0 spaces"}]},{"nr":80,"line":"            echo $outputDir . '\/data\/history.json' . PHP_EOL;","msg":[]},{"nr":81,"line":"            if(file_exists($outputDir . '\/data\/history.json')){","msg":[{"tool":"phpcs","level":2,"message":"Expected \"if (...) {\\n\"; found \"if(...){\\n\""},{"tool":"phpcs","level":2,"message":"There must be a single space between the closing parenthesis and the opening brace of a multi-line IF statement; found 0 spaces"}]},{"nr":82,"line":"                echo 'Loading history.' . PHP_EOL;","msg":[]},{"nr":83,"line":"                $history = json_decode(file_get_contents($outputDir . '\/data\/history.json'), true);","msg":[{"tool":"phpcs","level":2,"message":"Line exceeds 85 characters; contains 99 characters"}]},{"nr":84,"line":"            }else{","msg":[{"tool":"phpcs","level":2,"message":"Expected \"} else {\\n\"; found \"}else{\\n\""},{"tool":"phpmd","level":0,"message":"The method format uses an else expression. Else is never necessary and you can simplify the code to work without else."}]},{"nr":85,"line":"                echo 'Empty history initialised.' . PHP_EOL;","msg":[]},{"nr":86,"line":"                $history = array();","msg":[]},{"nr":87,"line":"            }","msg":[]},{"nr":88,"line":"            $history[] = $index;","msg":[]},{"nr":89,"line":"            file_put_contents($tempDir . 'data\/history.json', json_encode($history));","msg":[]},{"nr":90,"line":"            $this->recurse_copy($tempDir, $outputDir);","msg":[]},{"nr":91,"line":"        }","msg":[]},{"nr":92,"line":"","msg":[]},{"nr":93,"line":"        if($outputDir === null){","msg":[{"tool":"phpcs","level":2,"message":"Expected \"if (...) {\\n\"; found \"if(...){\\n\""},{"tool":"phpcs","level":2,"message":"There must be a single space between the closing parenthesis and the opening brace of a multi-line IF statement; found 0 spaces"}]},{"nr":94,"line":"            $outputDir = $tempDir;","msg":[]},{"nr":95,"line":"        }","msg":[]},{"nr":96,"line":"","msg":[]},{"nr":97,"line":"        if($serve){","msg":[{"tool":"phpcs","level":2,"message":"Expected \"if (...) {\\n\"; found \"if(...){\\n\""},{"tool":"phpcs","level":2,"message":"There must be a single space between the closing parenthesis and the opening brace of a multi-line IF statement; found 0 spaces"}]},{"nr":98,"line":"            rename($outputDir . '\/index.htm', $outputDir . '\/index.php');","msg":[]},{"nr":99,"line":"            echo \"Starting built-in php server on http:\/\/localhost:8123\/\" . PHP_EOL;","msg":[]},{"nr":100,"line":"            exec('php -S localhost:8123 -t \"' . $outputDir . '\" ');","msg":[]},{"nr":101,"line":"        }","msg":[]},{"nr":102,"line":"    }","msg":[]},{"nr":103,"line":"","msg":[]},{"nr":104,"line":"    private function messageToArray(Message $message)","msg":[{"tool":"phpcs","level":2,"message":"Missing function doc comment"},{"tool":"phpcs","level":2,"message":"Private method name \"AngularFormatter::messageToArray\" must be prefixed with an underscore"},{"tool":"phpdcd","level":0,"message":"8 lines of dead code"}]},{"nr":105,"line":"    {","msg":[]},{"nr":106,"line":"        return array(","msg":[]},{"nr":107,"line":"          'tool' => $message->getTool(),","msg":[]},{"nr":108,"line":"          'level' => $message->getErrorLevel(),","msg":[]},{"nr":109,"line":"          'message' => $message->getMessage()","msg":[]},{"nr":110,"line":"        );","msg":[]},{"nr":111,"line":"    }","msg":[]},{"nr":112,"line":"","msg":[]},{"nr":113,"line":"    private function mergeSourceCode(array $messages, $filename){","msg":[{"tool":"phpcs","level":2,"message":"Missing function doc comment"},{"tool":"phpcs","level":2,"message":"Private method name \"AngularFormatter::mergeSourceCode\" must be prefixed with an underscore"},{"tool":"phpcs","level":2,"message":"Opening brace should be on a new line"},{"tool":"phpdcd","level":0,"message":"16 lines of dead code"},{"tool":"phpdcd","level":0,"message":"16 lines of dead code"}]},{"nr":114,"line":"        $source = file($filename);","msg":[]},{"nr":115,"line":"        $result = array();","msg":[]},{"nr":116,"line":"        foreach($source as $linenr => $line){","msg":[{"tool":"phpcs","level":2,"message":"Expected \"foreach (...) {\\n\"; found \"foreach(...){\\n\""}]},{"nr":117,"line":"            $lineObj = array(","msg":[]},{"nr":118,"line":"                'nr' => $linenr + 1,","msg":[]},{"nr":119,"line":"                'line' => str_replace(\"\\n\", \"\", $line),","msg":[]},{"nr":120,"line":"                'msg' => array(),","msg":[]},{"nr":121,"line":"            );","msg":[]},{"nr":122,"line":"            if(isset($messages[$linenr + 1])){","msg":[{"tool":"phpcs","level":2,"message":"Expected \"if (...) {\\n\"; found \"if(...){\\n\""},{"tool":"phpcs","level":2,"message":"There must be a single space between the closing parenthesis and the opening brace of a multi-line IF statement; found 0 spaces"}]},{"nr":123,"line":"                $lineObj['msg'] = $messages[$linenr + 1];","msg":[]},{"nr":124,"line":"            }","msg":[]},{"nr":125,"line":"            $result[] = $lineObj;","msg":[]},{"nr":126,"line":"        }","msg":[]},{"nr":127,"line":"        return array('filename' => $filename, 'lines' => $result);","msg":[]},{"nr":128,"line":"    }","msg":[]},{"nr":129,"line":"","msg":[]},{"nr":130,"line":"    function recurse_copy($source, $dest)","msg":[{"tool":"phpcs","level":2,"message":"Missing function doc comment"},{"tool":"phpcs","level":2,"message":"Method name \"AngularFormatter::recurse_copy\" is not in camel caps format"},{"tool":"phpmd","level":0,"message":"The method recurse_copy is not named in camelCase."}]},{"nr":131,"line":"    {","msg":[]},{"nr":132,"line":"        \/\/ Check for symlinks","msg":[]},{"nr":133,"line":"        if (is_link($source)) {","msg":[]},{"nr":134,"line":"            return symlink(readlink($source), $dest);","msg":[]},{"nr":135,"line":"        }","msg":[]},{"nr":136,"line":"","msg":[]},{"nr":137,"line":"        \/\/ Simple copy for a file","msg":[]},{"nr":138,"line":"        if (is_file($source)) {","msg":[]},{"nr":139,"line":"            return copy($source, $dest);","msg":[]},{"nr":140,"line":"        }","msg":[]},{"nr":141,"line":"","msg":[]},{"nr":142,"line":"        \/\/ Make destination directory","msg":[]},{"nr":143,"line":"        if (!is_dir($dest)) {","msg":[]},{"nr":144,"line":"            mkdir($dest);","msg":[]},{"nr":145,"line":"        }","msg":[]},{"nr":146,"line":"","msg":[]},{"nr":147,"line":"        \/\/ Loop through the folder","msg":[]},{"nr":148,"line":"        $dir = dir($source);","msg":[]},{"nr":149,"line":"        while (false !== $entry = $dir->read()) {","msg":[]},{"nr":150,"line":"            \/\/ Skip pointers","msg":[]},{"nr":151,"line":"            if ($entry == '.' || $entry == '..') {","msg":[]},{"nr":152,"line":"                continue;","msg":[]},{"nr":153,"line":"            }","msg":[]},{"nr":154,"line":"","msg":[]},{"nr":155,"line":"            \/\/ Deep copy directories","msg":[]},{"nr":156,"line":"            $this->recurse_copy(\"$source\/$entry\", \"$dest\/$entry\");","msg":[]},{"nr":157,"line":"        }","msg":[]},{"nr":158,"line":"","msg":[]},{"nr":159,"line":"        \/\/ Clean up","msg":[]},{"nr":160,"line":"        $dir->close();","msg":[]},{"nr":161,"line":"        return true;","msg":[]},{"nr":162,"line":"    }","msg":[]},{"nr":163,"line":"","msg":[]},{"nr":164,"line":"    private function ensure_directory($path){","msg":[{"tool":"phpcs","level":2,"message":"You must use \"\/**\" style comments for a function comment"},{"tool":"phpcs","level":2,"message":"Private method name \"AngularFormatter::ensure_directory\" must be prefixed with an underscore"},{"tool":"phpcs","level":2,"message":"Opening brace should be on a new line"},{"tool":"phpmd","level":0,"message":"The method ensure_directory is not named in camelCase."},{"tool":"phpdcd","level":0,"message":"5 lines of dead code"},{"tool":"phpdcd","level":0,"message":"5 lines of dead code"},{"tool":"phpdcd","level":0,"message":"5 lines of dead code"},{"tool":"phpdcd","level":0,"message":"5 lines of dead code"}]},{"nr":165,"line":"        if(!is_dir($path)){","msg":[{"tool":"phpcs","level":2,"message":"Expected \"if (...) {\\n\"; found \"if(...){\\n\""},{"tool":"phpcs","level":2,"message":"There must be a single space between the closing parenthesis and the opening brace of a multi-line IF statement; found 0 spaces"}]},{"nr":166,"line":"            mkdir($path, 0777, true);","msg":[]},{"nr":167,"line":"        }","msg":[]},{"nr":168,"line":"    }","msg":[]},{"nr":169,"line":"","msg":[]},{"nr":170,"line":"","msg":[]},{"nr":171,"line":"} ","msg":[]}]}